import groovy.lang.Closure;


def shouldRunCoverage = System.properties.generateCoverage?.toBoolean() ?: false
def jacocoVersion = '0.6.1.201212231917'
def jacocoAgent = "org.jacoco.agent-${jacocoVersion}.jar"

configurations { jacoco }
dependencies {
    jacoco "org.jacoco:org.jacoco.agent:${jacocoVersion}"
    jacoco "org.jacoco:org.jacoco.ant:${jacocoVersion}"
}

def jacocoConvention = new JacocoPluginConvention(project)
project.convention.plugins.jacoco = jacocoConvention


test.doFirst {
    if (shouldRunCoverage) {
        println ">>> coverage '${project.name}'"
        ant.taskdef(name:'jacocoagent', classname: 'org.jacoco.ant.AgentTask', classpath: configurations.jacoco.asPath)
        ant.jacocoagent(jacocoConvention.getParams())
        jvmArgs ant.properties.agentvmparam
    }
}

test {
    testLogging.showStandardStreams = true

    /* turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library */
    testReport = false
    useTestNG() {
        /* report generation delegated to TestNG library */
        useDefaultListeners = true
    }
}


test.doLast {
    if (shouldRunCoverage) {
        if (!jacocoConvention.isCoverageFileExists()) {
            println "Skipping Jacoco report for ${project.name}. The data file is missing. (Maybe no tests ran in this module?)"
            println "The data file was expected at ${jacocoConvention.coverageFileName}"
            println '<<< coverage'
            return
        }

        ant.taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask', classpath: configurations.jacoco.asPath)
        ant.mkdir dir: jacocoConvention.reportPath

        ant.jacocoreport {
            executiondata {
                ant.file file: jacocoConvention.coverageFileName
            }
            structure(name: project.name) {
                classfiles {
                    fileset dir: sourceSets.main.output.classesDir
                }
                sourcefiles {
                    sourceSets.main.java.srcDirs.each {
                        fileset(dir: it.absolutePath)
                    }
                }
            }
            xml  destfile: "${jacocoConvention.reportPath}/jacoco.xml"
            html destdir: jacocoConvention.reportPath
        }

        println '<<< coverage'
    }
}


class JacocoPluginConvention {
    def reportPath
    def coverageFileName
    def tmpDir
    def includes
    def excludes
    def exclclassloader
    def append
    def sessionid
    def dumponexit
    def output
    def address
    def port

    def jacoco(Closure close) {
        close.delegate = this
        close.run()
    }

    JacocoPluginConvention(Project project) {
        reportPath = "${project.reporting.baseDir.absolutePath}/jacoco"
        tmpDir = "${project.buildDir}/tmp/jacoco"
        coverageFileName = "${tmpDir}/jacoco.exec"
        includes = []
        excludes = []
        exclclassloader = []
        sessionid = null
        append = false
        dumponexit = true
        output = "file"
        address = null
        port = null
    }

    def getParams() {
        def params = [:]
        params['property'] = 'agentvmparam'
        params['destfile'] = coverageFileName
        if (includes != null && includes.size() > 0) params['includes'] = includes.join(':')
        if (excludes != null && excludes.size() > 0) params['excludes'] = excludes.join(':')
        if (exclclassloader != null && exclclassloader.size > 0) params['exclclassloader'] = exclclassloader
        if (sessionid != null) params['sessionid'] = sessionid
        params['append'] = append
        params['dumponexit'] = dumponexit
        params['output'] = output
        if (address != null) params['address'] = address
        if (port != null) params['port'] = port
        return params
    }

    def isCoverageFileExists() {
        return new File(coverageFileName).exists()
    }
}